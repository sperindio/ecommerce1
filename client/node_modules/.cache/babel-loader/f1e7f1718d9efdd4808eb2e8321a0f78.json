{"ast":null,"code":"/*In computing, memoization or memoisation is an optimization technique \n\nused primarily to speed up computer programs by storing the results of expensive function calls \nand returning the cached result when the same inputs occur again.\n\n it’s a technique that executes a (pure) function once, saves the result in memory, \n and if we try to execute that function again with the same arguments as before, \nit just returns that previously saved result without executing the function again.*/\nimport { createSelector } from \"reselect\";\n\nvar selectCart = function selectCart(state) {\n  return state.cart;\n};\n\nexport var selectCartHidden = createSelector([selectCart], function (cart) {\n  return cart.hidden;\n});\nexport var selectCartItems = createSelector([selectCart], function (cart) {\n  return cart.cartItems;\n});\nexport var selectCartItemsCount = createSelector([selectCartItems], function (cartItems) {\n  return cartItems.reduce(function (accumulatedQuantity, cartItem) {\n    return accumulatedQuantity + cartItem.quantity;\n  }, 0);\n});\nexport var selectCartTotal = createSelector([selectCartItems], function (cartItems) {\n  return cartItems.reduce(function (accumulatedQuantity, cartItem) {\n    return accumulatedQuantity + cartItem.quantity * cartItem.price;\n  }, 0);\n});","map":{"version":3,"sources":["/Users/alberto/Desktop/Apps/ecommerce1/client/src/redux/cart/cart.selector.js"],"names":["createSelector","selectCart","state","cart","selectCartHidden","hidden","selectCartItems","cartItems","selectCartItemsCount","reduce","accumulatedQuantity","cartItem","quantity","selectCartTotal","price"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,cAAT,QAA+B,UAA/B;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,IAAjB;AAAA,CAAnB;;AAEA,OAAO,IAAMC,gBAAgB,GAAGJ,cAAc,CAC5C,CAACC,UAAD,CAD4C,EAE5C,UAACE,IAAD;AAAA,SAAUA,IAAI,CAACE,MAAf;AAAA,CAF4C,CAAvC;AAKP,OAAO,IAAMC,eAAe,GAAGN,cAAc,CAC3C,CAACC,UAAD,CAD2C,EAE3C,UAACE,IAAD;AAAA,SAAUA,IAAI,CAACI,SAAf;AAAA,CAF2C,CAAtC;AAKP,OAAO,IAAMC,oBAAoB,GAAGR,cAAc,CAChD,CAACM,eAAD,CADgD,EAEhD,UAACC,SAAD;AAAA,SACEA,SAAS,CAACE,MAAV,CACE,UAACC,mBAAD,EAAsBC,QAAtB;AAAA,WACED,mBAAmB,GAAGC,QAAQ,CAACC,QADjC;AAAA,GADF,EAGE,CAHF,CADF;AAAA,CAFgD,CAA3C;AAUP,OAAO,IAAMC,eAAe,GAAGb,cAAc,CAAC,CAACM,eAAD,CAAD,EAAoB,UAACC,SAAD;AAAA,SAC/DA,SAAS,CAACE,MAAV,CACE,UAACC,mBAAD,EAAsBC,QAAtB;AAAA,WACED,mBAAmB,GAAGC,QAAQ,CAACC,QAAT,GAAoBD,QAAQ,CAACG,KADrD;AAAA,GADF,EAGE,CAHF,CAD+D;AAAA,CAApB,CAAtC","sourcesContent":["/*In computing, memoization or memoisation is an optimization technique \n\nused primarily to speed up computer programs by storing the results of expensive function calls \nand returning the cached result when the same inputs occur again.\n\n it’s a technique that executes a (pure) function once, saves the result in memory, \n and if we try to execute that function again with the same arguments as before, \nit just returns that previously saved result without executing the function again.*/\n\nimport { createSelector } from \"reselect\";\n\nconst selectCart = (state) => state.cart;\n\nexport const selectCartHidden = createSelector(\n  [selectCart],\n  (cart) => cart.hidden\n);\n\nexport const selectCartItems = createSelector(\n  [selectCart],\n  (cart) => cart.cartItems\n);\n\nexport const selectCartItemsCount = createSelector(\n  [selectCartItems],\n  (cartItems) =>\n    cartItems.reduce(\n      (accumulatedQuantity, cartItem) =>\n        accumulatedQuantity + cartItem.quantity,\n      0\n    )\n);\n\nexport const selectCartTotal = createSelector([selectCartItems], (cartItems) =>\n  cartItems.reduce(\n    (accumulatedQuantity, cartItem) =>\n      accumulatedQuantity + cartItem.quantity * cartItem.price,\n    0\n  )\n);\n"]},"metadata":{},"sourceType":"module"}