{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./root-reducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./root-saga\";\nvar sagaMiddleware = createSagaMiddleware();\nvar middlewares = [sagaMiddleware]; //In middlewares, we store the logger array, which intercept the set of actions that are being actionated.\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\nexport var store = createStore(rootReducer, applyMiddleware.apply(void 0, middlewares)); //Now, we actually create the store with the root reducer (thus the collection of states) and the logger (actions)\n\nsagaMiddleware.run(rootSaga);\nexport var persistor = persistStore(store);\nexport default {\n  store: store,\n  persistor: persistor\n};","map":{"version":3,"sources":["/Users/alberto/Desktop/Apps/ecommerce1/client/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","logger","rootReducer","createSagaMiddleware","rootSaga","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,IAAMC,cAAc,GAAGF,oBAAoB,EAA3C;AAEA,IAAMG,WAAW,GAAG,CAACD,cAAD,CAApB,C,CAAsC;;AAEtC,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CH,EAAAA,WAAW,CAACI,IAAZ,CAAiBT,MAAjB;AACD;;AAED,OAAO,IAAMU,KAAK,GAAGb,WAAW,CAACI,WAAD,EAAcH,eAAe,MAAf,SAAmBO,WAAnB,CAAd,CAAzB,C,CAAyE;;AAEhFD,cAAc,CAACO,GAAf,CAAmBR,QAAnB;AAEA,OAAO,IAAMS,SAAS,GAAGb,YAAY,CAACW,KAAD,CAA9B;AAEP,eAAe;AAAEA,EAAAA,KAAK,EAALA,KAAF;AAASE,EAAAA,SAAS,EAATA;AAAT,CAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./root-reducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./root-saga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware]; //In middlewares, we store the logger array, which intercept the set of actions that are being actionated.\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares)); //Now, we actually create the store with the root reducer (thus the collection of states) and the logger (actions)\n\nsagaMiddleware.run(rootSaga);\n\nexport const persistor = persistStore(store);\n\nexport default { store, persistor };\n"]},"metadata":{},"sourceType":"module"}