{"ast":null,"code":"var _jsxFileName = \"/Users/alberto/Desktop/Apps/ecommerce1/src/pages/shop/shop.component.jsx\",\n    _this = this;\n\nimport React, { useEffect } from \"react\";\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport { Route } from \"react-router-dom\";\nimport CollectionPageContainer from \"../collection/collection.container\";\nimport { connect } from \"react-redux\";\nimport { fetchCollectionsStart as _fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ShopPage = function ShopPage(_ref) {\n  var match = _ref.match,\n      fetchCollectionsStart = _ref.fetchCollectionsStart;\n\n  /*   //Fetch shop data from Firestor\n  unsubscribeFromSnapshot = null; */\n  useEffect(function () {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]);\n  /* \n   //EVERYTHING IS MANAGED BY REDUX AND REDUX-THUNK SINCE IT'S A BETTER PRACTICE. SHOP ITEMS COULDN'T LOAD UNLESS SHOP PAGE WAS VISITED\n   const { updateCollections } = this.props;\n    const collectionRef = firestore.collection(\"collections\");\n  //----------------------------------------------------\n    /*     //The \"fetch\" method is similiar to the get() method, but the object returned is far more articulated than the others.\n    fetch(\n      \"https://firestore.googleapis.com/v1/projects/crwn-db-4e424/databases/(default)/documents/collections\"\n    )\n      .then((response) => response.json())\n      .then((collections) => console.log(collections)); */\n  //----------------------------------------------------\n\n  /*     //This way is a one-time fetch method, quite common and doesn't require a listener component\n    collectionRef.get().then((snapshot) => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({ loading: false });\n    }); */\n  //----------------------------------------------------\n\n  /*     \n      //This method to fetch data is more advanced. It establishes a live listener on the DB or whatever event-generating component.\n      this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n      async (snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        updateCollections(collectionsMap);\n        this.setState({ loading: false });\n      }\n    ); */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"shop-page\",\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"\".concat(match.path),\n      component: CollectionsOverviewContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"\".concat(match.path, \"/:collectionId\"),\n      component: CollectionPageContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, _this);\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchCollectionsStart: function fetchCollectionsStart() {\n      return dispatch(_fetchCollectionsStart());\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/alberto/Desktop/Apps/ecommerce1/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","CollectionsOverviewContainer","Route","CollectionPageContainer","connect","fetchCollectionsStart","ShopPage","match","path","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAqB,IAArBA,sBAAT,QAAsC,+BAAtC;;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAsC;AAAA,MAAnCC,KAAmC,QAAnCA,KAAmC;AAAA,MAA5BF,qBAA4B,QAA5BA,qBAA4B;;AACrD;AACF;AACEL,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,qBAAqB;AACtB,GAFQ,EAEN,CAACA,qBAAD,CAFM,CAAT;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;;AACA;AACF;AACA;AACA;AACA;AACA;AACE;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,YAAKE,KAAK,CAACC,IAAX,CAFN;AAGE,MAAA,SAAS,EAAEP;AAHb;AAAA;AAAA;AAAA;AAAA,aADF,eAME,QAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,YAAKM,KAAK,CAACC,IAAX,mBAFN;AAGE,MAAA,SAAS,EAAEL;AAHb;AAAA;AAAA;AAAA;AAAA,aANF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAcD,CAjDD;;AAmDA,IAAMM,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAAe;AACxCL,IAAAA,qBAAqB,EAAE;AAAA,aAAMK,QAAQ,CAACL,sBAAqB,EAAtB,CAAd;AAAA;AADiB,GAAf;AAAA,CAA3B;;AAIA,eAAeD,OAAO,CAAC,IAAD,EAAOK,kBAAP,CAAP,CAAkCH,QAAlC,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport { Route } from \"react-router-dom\";\nimport CollectionPageContainer from \"../collection/collection.container\";\n\nimport { connect } from \"react-redux\";\nimport { fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\n\nconst ShopPage = ({ match, fetchCollectionsStart }) => {\n  /*   //Fetch shop data from Firestor\n  unsubscribeFromSnapshot = null; */\n  useEffect(() => {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]);\n  /* \n   //EVERYTHING IS MANAGED BY REDUX AND REDUX-THUNK SINCE IT'S A BETTER PRACTICE. SHOP ITEMS COULDN'T LOAD UNLESS SHOP PAGE WAS VISITED\n   const { updateCollections } = this.props;\n    const collectionRef = firestore.collection(\"collections\");\n//----------------------------------------------------\n    /*     //The \"fetch\" method is similiar to the get() method, but the object returned is far more articulated than the others.\n    fetch(\n      \"https://firestore.googleapis.com/v1/projects/crwn-db-4e424/databases/(default)/documents/collections\"\n    )\n      .then((response) => response.json())\n      .then((collections) => console.log(collections)); */\n  //----------------------------------------------------\n  /*     //This way is a one-time fetch method, quite common and doesn't require a listener component\n    collectionRef.get().then((snapshot) => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({ loading: false });\n    }); */\n  //----------------------------------------------------\n  /*     \n      //This method to fetch data is more advanced. It establishes a live listener on the DB or whatever event-generating component.\n      this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n      async (snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        updateCollections(collectionsMap);\n        this.setState({ loading: false });\n      }\n    ); */\n\n  return (\n    <div className=\"shop-page\">\n      <Route\n        exact\n        path={`${match.path}`}\n        component={CollectionsOverviewContainer}\n      />\n      <Route\n        exact\n        path={`${match.path}/:collectionId`}\n        component={CollectionPageContainer}\n      />\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart()),\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}