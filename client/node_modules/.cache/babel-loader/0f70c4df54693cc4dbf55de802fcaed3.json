{"ast":null,"code":"import _toConsumableArray from \"/Users/alberto/Desktop/Apps/ecommerce1/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/alberto/Desktop/Apps/ecommerce1/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nexport var addItemToCart = function addItemToCart(cartItems, cartItemToAdd) {\n  var existingCartItem = cartItems.find(function (cartItem) {\n    return cartItem.id === cartItemToAdd.id;\n  });\n\n  if (existingCartItem) {\n    return cartItems.map(function (cartItem) {\n      return cartItem.id === cartItemToAdd.id ? _objectSpread(_objectSpread({}, cartItem), {}, {\n        quantity: cartItem.quantity + 1\n      }) : cartItem;\n    }); //Even if the items are the same and don't need to be added again in the cart, we need necessarily to return a new array in order to update the DOM as per React mechanics\n  }\n\n  return [].concat(_toConsumableArray(cartItems), [_objectSpread(_objectSpread({}, cartItemToAdd), {}, {\n    quantity: 1\n  })]); //If the cart item that we want to add to the cart doesn't exist yet in the array, we add it together with the initial quantity property value of 1\n};\nexport var removeItemFromCart = function removeItemFromCart(cartItems, cartItemToRemove) {\n  var existingCartItem = cartItems.find(function (cartItem) {\n    return cartItem.id === cartItemToRemove.id;\n  });\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(function (cartItem) {\n      return cartItem.id !== cartItemToRemove.id;\n    });\n  }\n\n  return cartItems.map(function (cartItem) {\n    return cartItem.id === cartItemToRemove.id ? _objectSpread(_objectSpread({}, cartItem), {}, {\n      quantity: cartItem.quantity - 1\n    }) : cartItem;\n  });\n}; //This function will first check if the item we want to remove actually exist in the cart, then it checks if quantity is equal to 1. If >1 it will just decrease the quantity, if === 1 it will remove the item from the cart.","map":{"version":3,"sources":["/Users/alberto/Desktop/Apps/ecommerce1/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","filter"],"mappings":";;AAAA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAAYC,aAAZ,EAA8B;AACzD,MAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACvB,UAACC,QAAD;AAAA,WAAcA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA5C;AAAA,GADuB,CAAzB;;AAIA,MAAIH,gBAAJ,EAAsB;AACpB,WAAOF,SAAS,CAACM,GAAV,CAAc,UAACF,QAAD;AAAA,aACnBA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,mCACSD,QADT;AACmBG,QAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AADjD,WAEIH,QAHe;AAAA,KAAd,CAAP,CADoB,CAKjB;AACJ;;AAED,sCAAWJ,SAAX,oCAA2BC,aAA3B;AAA0CM,IAAAA,QAAQ,EAAE;AAApD,OAbyD,CAaC;AAC3D,CAdM;AAgBP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACR,SAAD,EAAYS,gBAAZ,EAAiC;AACjE,MAAMP,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACvB,UAACC,QAAD;AAAA,WAAcA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAA/C;AAAA,GADuB,CAAzB;;AAIA,MAAIH,gBAAgB,CAACK,QAAjB,KAA8B,CAAlC,EAAqC;AACnC,WAAOP,SAAS,CAACU,MAAV,CAAiB,UAACN,QAAD;AAAA,aAAcA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAA/C;AAAA,KAAjB,CAAP;AACD;;AAED,SAAOL,SAAS,CAACM,GAAV,CAAc,UAACF,QAAD;AAAA,WACnBA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAjC,mCACSD,QADT;AACmBG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AADjD,SAEIH,QAHe;AAAA,GAAd,CAAP;AAKD,CAdM,C,CAcJ","sourcesContent":["export const addItemToCart = (cartItems, cartItemToAdd) => {\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === cartItemToAdd.id\n  );\n\n  if (existingCartItem) {\n    return cartItems.map((cartItem) =>\n      cartItem.id === cartItemToAdd.id\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    ); //Even if the items are the same and don't need to be added again in the cart, we need necessarily to return a new array in order to update the DOM as per React mechanics\n  }\n\n  return [...cartItems, { ...cartItemToAdd, quantity: 1 }]; //If the cart item that we want to add to the cart doesn't exist yet in the array, we add it together with the initial quantity property value of 1\n};\n\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === cartItemToRemove.id\n  );\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\n  }\n\n  return cartItems.map((cartItem) =>\n    cartItem.id === cartItemToRemove.id\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : cartItem\n  );\n}; //This function will first check if the item we want to remove actually exist in the cart, then it checks if quantity is equal to 1. If >1 it will just decrease the quantity, if === 1 it will remove the item from the cart.\n"]},"metadata":{},"sourceType":"module"}