{"ast":null,"code":"import _classCallCheck from \"/Users/alberto/Desktop/Apps/ecommerce1/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/alberto/Desktop/Apps/ecommerce1/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/alberto/Desktop/Apps/ecommerce1/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/alberto/Desktop/Apps/ecommerce1/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _jsxFileName = \"/Users/alberto/Desktop/Apps/ecommerce1/src/pages/shop/shop.component.jsx\";\nimport React from \"react\";\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport { Route } from \"react-router-dom\";\nimport CollectionPageContainer from \"../collection/collection.container\";\nimport { connect } from \"react-redux\";\nimport { fetchCollectionsStart as _fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ShopPage = /*#__PURE__*/function (_React$Component) {\n  _inherits(ShopPage, _React$Component);\n\n  var _super = _createSuper(ShopPage);\n\n  function ShopPage() {\n    _classCallCheck(this, ShopPage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ShopPage, [{\n    key: \"componentDidMount\",\n    value:\n    /*   //Fetch shop data from Firestor\n    unsubscribeFromSnapshot = null; */\n    function componentDidMount() {\n      var fetchCollectionsStart = this.props.fetchCollectionsStart;\n      fetchCollectionsStart();\n      /* \n      //EVERYTHING IS MANAGED BY REDUX AND REDUX-THUNK SINCE IT'S A BETTER PRACTICE. SHOP ITEMS COULDN'T LOAD UNLESS SHOP PAGE WAS VISITED\n      const { updateCollections } = this.props;\n      const collectionRef = firestore.collection(\"collections\");\n      //----------------------------------------------------\n      /*     //The \"fetch\" method is similiar to the get() method, but the object returned is far more articulated than the others.\n      fetch(\n        \"https://firestore.googleapis.com/v1/projects/crwn-db-4e424/databases/(default)/documents/collections\"\n      )\n        .then((response) => response.json())\n        .then((collections) => console.log(collections)); */\n      //----------------------------------------------------\n\n      /*     //This way is a one-time fetch method, quite common and doesn't require a listener component\n      collectionRef.get().then((snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        updateCollections(collectionsMap);\n        this.setState({ loading: false });\n      }); */\n      //----------------------------------------------------\n\n      /*     \n        //This method to fetch data is more advanced. It establishes a live listener on the DB or whatever event-generating component.\n        this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n        async (snapshot) => {\n          const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n          updateCollections(collectionsMap);\n          this.setState({ loading: false });\n        }\n      ); */\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var match = this.props.match;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shop-page\",\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"\".concat(match.path),\n          component: CollectionsOverviewContainer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"\".concat(match.path, \"/:collectionId\"),\n          component: CollectionPageContainer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return ShopPage;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchCollectionsStart: function fetchCollectionsStart() {\n      return dispatch(_fetchCollectionsStart());\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/alberto/Desktop/Apps/ecommerce1/src/pages/shop/shop.component.jsx"],"names":["React","CollectionsOverviewContainer","Route","CollectionPageContainer","connect","fetchCollectionsStart","ShopPage","props","match","path","Component","mapDispatchToProps","dispatch"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAqB,IAArBA,sBAAT,QAAsC,+BAAtC;;;IAEMC,Q;;;;;;;;;;;;;;AACJ;AACF;AACE,iCAAoB;AAClB,UAAQD,qBAAR,GAAkC,KAAKE,KAAvC,CAAQF,qBAAR;AACAA,MAAAA,qBAAqB;AAErB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;;AACA;AACJ;AACA;AACA;AACA;AACA;AACI;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;;;WAED,kBAAS;AACP,UAAQG,KAAR,GAAkB,KAAKD,KAAvB,CAAQC,KAAR;AACA,0BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE,QAAC,KAAD;AACE,UAAA,KAAK,MADP;AAEE,UAAA,IAAI,YAAKA,KAAK,CAACC,IAAX,CAFN;AAGE,UAAA,SAAS,EAAER;AAHb;AAAA;AAAA;AAAA;AAAA,gBADF,eAME,QAAC,KAAD;AACE,UAAA,KAAK,MADP;AAEE,UAAA,IAAI,YAAKO,KAAK,CAACC,IAAX,mBAFN;AAGE,UAAA,SAAS,EAAEN;AAHb;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAcD;;;;EArDoBH,KAAK,CAACU,S;;AAwD7B,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAAe;AACxCP,IAAAA,qBAAqB,EAAE;AAAA,aAAMO,QAAQ,CAACP,sBAAqB,EAAtB,CAAd;AAAA;AADiB,GAAf;AAAA,CAA3B;;AAIA,eAAeD,OAAO,CAAC,IAAD,EAAOO,kBAAP,CAAP,CAAkCL,QAAlC,CAAf","sourcesContent":["import React from \"react\";\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport { Route } from \"react-router-dom\";\nimport CollectionPageContainer from \"../collection/collection.container\";\n\nimport { connect } from \"react-redux\";\nimport { fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\n\nclass ShopPage extends React.Component {\n  /*   //Fetch shop data from Firestor\n  unsubscribeFromSnapshot = null; */\n  componentDidMount() {\n    const { fetchCollectionsStart } = this.props;\n    fetchCollectionsStart();\n\n    /* \n   //EVERYTHING IS MANAGED BY REDUX AND REDUX-THUNK SINCE IT'S A BETTER PRACTICE. SHOP ITEMS COULDN'T LOAD UNLESS SHOP PAGE WAS VISITED\n   const { updateCollections } = this.props;\n    const collectionRef = firestore.collection(\"collections\");\n//----------------------------------------------------\n    /*     //The \"fetch\" method is similiar to the get() method, but the object returned is far more articulated than the others.\n    fetch(\n      \"https://firestore.googleapis.com/v1/projects/crwn-db-4e424/databases/(default)/documents/collections\"\n    )\n      .then((response) => response.json())\n      .then((collections) => console.log(collections)); */\n    //----------------------------------------------------\n    /*     //This way is a one-time fetch method, quite common and doesn't require a listener component\n    collectionRef.get().then((snapshot) => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({ loading: false });\n    }); */\n    //----------------------------------------------------\n    /*     \n      //This method to fetch data is more advanced. It establishes a live listener on the DB or whatever event-generating component.\n      this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n      async (snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        updateCollections(collectionsMap);\n        this.setState({ loading: false });\n      }\n    ); */\n  }\n\n  render() {\n    const { match } = this.props;\n    return (\n      <div className=\"shop-page\">\n        <Route\n          exact\n          path={`${match.path}`}\n          component={CollectionsOverviewContainer}\n        />\n        <Route\n          exact\n          path={`${match.path}/:collectionId`}\n          component={CollectionPageContainer}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart()),\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}