{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./root-reducer\";\nimport thunk from \"redux-thunk\";\nvar middlewares = [thunk]; //In middlewares, we store the logger array, which intercept the set of actions that are being actionated.\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\nexport var store = createStore(rootReducer, applyMiddleware.apply(void 0, middlewares)); //Now, we actually create the store with the root reducer (thus the collection of states) and the logger (actions)\n\nexport var persistor = persistStore(store);\nexport default {\n  store: store,\n  persistor: persistor\n};","map":{"version":3,"sources":["/Users/alberto/Desktop/Apps/ecommerce1/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","logger","rootReducer","thunk","middlewares","process","env","NODE_ENV","push","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,IAAMC,WAAW,GAAG,CAACD,KAAD,CAApB,C,CAA6B;;AAE7B,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CH,EAAAA,WAAW,CAACI,IAAZ,CAAiBP,MAAjB;AACD;;AAED,OAAO,IAAMQ,KAAK,GAAGX,WAAW,CAACI,WAAD,EAAcH,eAAe,MAAf,SAAmBK,WAAnB,CAAd,CAAzB,C,CAAyE;;AAEhF,OAAO,IAAMM,SAAS,GAAGV,YAAY,CAACS,KAAD,CAA9B;AAEP,eAAe;AAAEA,EAAAA,KAAK,EAALA,KAAF;AAASC,EAAAA,SAAS,EAATA;AAAT,CAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./root-reducer\";\nimport thunk from \"redux-thunk\";\n\nconst middlewares = [thunk]; //In middlewares, we store the logger array, which intercept the set of actions that are being actionated.\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares)); //Now, we actually create the store with the root reducer (thus the collection of states) and the logger (actions)\n\nexport const persistor = persistStore(store);\n\nexport default { store, persistor };\n"]},"metadata":{},"sourceType":"module"}