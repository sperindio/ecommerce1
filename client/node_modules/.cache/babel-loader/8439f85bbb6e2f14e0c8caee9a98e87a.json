{"ast":null,"code":"{\n  /*In computing, memoization or memoisation is an optimization technique \n  used primarily to speed up computer programs by storing the results of expensive function calls \n  and returning the cached result when the same inputs occur again.\n  it’s a technique that executes a (pure) function once, saves the result in memory, \n  and if we try to execute that function again with the same arguments as before, \n  it just returns that previously saved result without executing the function again.*/\n}\nimport { createSelector } from \"reselect\";\n\nvar selectUser = function selectUser(state) {\n  return state.user;\n};\n\nexport var selectCurrentUser = createSelector([selectUser], function (user) {\n  return user.currentUser;\n});","map":{"version":3,"sources":["/Users/alberto/Desktop/Apps/ecommerce1/src/redux/user/user.selectors.js"],"names":["createSelector","selectUser","state","user","selectCurrentUser","currentUser"],"mappings":"AAAA;AACE;AACF;AACA;AACA;AACA;AACA;AAEC;AACD,SAASA,cAAT,QAA+B,UAA/B;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,IAAjB;AAAA,CAAnB;;AAEA,OAAO,IAAMC,iBAAiB,GAAGJ,cAAc,CAC7C,CAACC,UAAD,CAD6C,EAE7C,UAACE,IAAD;AAAA,SAAUA,IAAI,CAACE,WAAf;AAAA,CAF6C,CAAxC","sourcesContent":["{\n  /*In computing, memoization or memoisation is an optimization technique \nused primarily to speed up computer programs by storing the results of expensive function calls \nand returning the cached result when the same inputs occur again.\n\n it’s a technique that executes a (pure) function once, saves the result in memory, \n and if we try to execute that function again with the same arguments as before, \nit just returns that previously saved result without executing the function again.*/\n}\nimport { createSelector } from \"reselect\";\n\nconst selectUser = (state) => state.user;\n\nexport const selectCurrentUser = createSelector(\n  [selectUser],\n  (user) => user.currentUser\n);\n"]},"metadata":{},"sourceType":"module"}