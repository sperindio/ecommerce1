{"ast":null,"code":"import ShopActionTypes from \"./shop.types\";\nimport { firestore, converconvertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nexport var fetchCollectionsStart = function fetchCollectionsStart() {\n  return {\n    type: ShopActionTypes.FETCH_COLLECTIONS_START\n  };\n};\nexport var fetchCollectionsSuccess = function fetchCollectionsSuccess(collectionsMap) {\n  return {\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionsMap\n  };\n};\nexport var fetchCollectionsFailure = function fetchCollectionsFailure(errorMessage) {\n  return {\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage\n  };\n};\nexport var fetchCollectionsStartAsync = function fetchCollectionsStartAsync() {\n  return function (dispatch) {\n    var collectionRef = firestore.collection(\"collections\");\n    dispatch(fetchCollectionsStart()); //This way is a one-time fetch method, quite common and doesn't require a listener component\n\n    collectionRef.get().then(function (snapshot) {\n      var collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsStartAsync(collectionsMap));\n    }).catch(function (error) {\n      return dispatch(fetchCollectionsFailure(error.message));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/alberto/Desktop/Apps/ecommerce1/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","converconvertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","convertCollectionsSnapshotToMap","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SACEC,SADF,EAEEC,qCAFF,QAGO,+BAHP;AAKA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAAO;AAC1CC,IAAAA,IAAI,EAAEJ,eAAe,CAACK;AADoB,GAAP;AAAA,CAA9B;AAIP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,cAAD;AAAA,SAAqB;AAC1DH,IAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADoC;AAE1DC,IAAAA,OAAO,EAAEF;AAFiD,GAArB;AAAA,CAAhC;AAKP,OAAO,IAAMG,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,YAAD;AAAA,SAAmB;AACxDP,IAAAA,IAAI,EAAEJ,eAAe,CAACY,yBADkC;AAExDH,IAAAA,OAAO,EAAEE;AAF+C,GAAnB;AAAA,CAAhC;AAKP,OAAO,IAAME,0BAA0B,GAAG,SAA7BA,0BAA6B,GAAM;AAC9C,SAAO,UAACC,QAAD,EAAc;AACnB,QAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR,CAFmB,CAGnB;;AACAY,IAAAA,aAAa,CACVE,GADH,GAEGC,IAFH,CAEQ,UAACC,QAAD,EAAc;AAClB,UAAMZ,cAAc,GAAGa,+BAA+B,CAACD,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACD,0BAA0B,CAACN,cAAD,CAA3B,CAAR;AACD,KALH,EAMGc,KANH,CAMS,UAACC,KAAD;AAAA,aAAWR,QAAQ,CAACJ,uBAAuB,CAACY,KAAK,CAACC,OAAP,CAAxB,CAAnB;AAAA,KANT;AAOD,GAXD;AAYD,CAbM","sourcesContent":["import ShopActionTypes from \"./shop.types\";\nimport {\n  firestore,\n  converconvertCollectionsSnapshotToMap,\n} from \"../../firebase/firebase.utils\";\n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START,\n});\n\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap,\n});\n\nexport const fetchCollectionsFailure = (errorMessage) => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage,\n});\n\nexport const fetchCollectionsStartAsync = () => {\n  return (dispatch) => {\n    const collectionRef = firestore.collection(\"collections\");\n    dispatch(fetchCollectionsStart());\n    //This way is a one-time fetch method, quite common and doesn't require a listener component\n    collectionRef\n      .get()\n      .then((snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        dispatch(fetchCollectionsStartAsync(collectionsMap));\n      })\n      .catch((error) => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}